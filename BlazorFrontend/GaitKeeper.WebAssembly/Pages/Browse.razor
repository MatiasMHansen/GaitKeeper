@page "/browse"
@inject GaitSessionService GaitSessionService
@inject DatasetServices DatasetService
@inject IJSRuntime JS

<PageTitle>Browse</PageTitle>

<h2>Browse the database</h2>
<div class="mb-4">
    <h5>& create your own dataset</h5>
</div>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
        @successMessage
        <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
    </div>
}

<div class="row mb-3 align-items-center">
    <div class="col-md-6 d-flex align-items-center">
        <button class="btn btn-outline-info me-2" @onclick="() => showFilterModal = true">Filter</button>
        <button class="btn btn-outline-secondary me-2" @onclick="LoadSessions">Search</button>
        <div class="m-2">
            <strong>Subjects found: @foundSubjectsCount</strong>
        </div>
    </div>
    <div class="col-md-6 d-flex justify-content-end pe-5">
        <strong>Total subjects selected: @selectedSubjectsCount</strong>
    </div>
</div>

<div class="row gx-2">
    <!-- Venstre tabel -->
    <div class="col-md-5">
        <div class="border p-2" style="height: 700px; overflow-y: auto;">
            @if (filteredSessions is not null && filteredSessions.Any())
            {
                <table class="table table-sm table-hover">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Subject Id</th>
                            <th>Description</th>
                            <th>Height (mm)</th>
                            <th>Weight (kg)</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var session in filteredSessions.Select((value, index) => new { value, index }))
                        {
                            bool isSelected = addSelectedIds.Contains(session.value.Id);   // check om markeret
                            <tr class="@((isSelected ? "table-success" : ""))"
                                style="cursor: pointer;"
                                @onclick="() => ToggleSelectionAdd(session.value.Id)">
                                <td>@(session.index + 1)</td>
                                <td>@(session.value.SubjectId)</td>
                                <td>@session.value.Description</td>
                                <td>@session.value.Biometrics.Height</td>
                                <td>@session.value.Biometrics.Weight</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p class="text-muted text-center mt-5">No gait sessions match the current filter.</p>
            }
        </div>
    </div>

    <!-- Midterknapper -->
    <div class="col-md-2 d-flex flex-column justify-content-center align-items-center gap-2">
        <button class="btn btn-success"
                disabled="@(addSelectedIds.Count == 0)"
                @onclick="AddSelectedSessions">
            &gt;
        </button>
        <button class="btn btn-danger"
                disabled="@(removeSelectedIds.Count == 0)"
                @onclick="RemoveSelectedSessions">
            &lt;
        </button>
    </div>

    <!-- Højre tabel -->
    <div class="col-md-5">
        <div class="border p-2" style="height: 600px; overflow-y: auto;">
            @if (selectedSessions is not null && selectedSessions.Any())
            {
                <table class="table table-sm table-hover">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Subject Id</th>
                            <th>Description</th>
                            <th>Height (mm)</th>
                            <th>Weight (kg)</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var session in selectedSessions.Select((value, index) => new { value, index }))
                        {
                            bool isSelected = removeSelectedIds.Contains(session.value.Id);
                            <tr class="@((isSelected ? "table-success" : ""))"
                                style="cursor: pointer;"
                                @onclick="() => ToggleSelectedRemove(session.value.Id)">
                                <td>@(session.index + 1)</td>
                                <td>@(session.value.SubjectId)</td>
                                <td>@session.value.Description</td>
                                <td>@session.value.Biometrics.Height</td>
                                <td>@session.value.Biometrics.Weight</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p class="text-muted text-center mt-5">
                    No gait sessions selected yet.
                </p>
            }
        </div>
    </div>
</div>

<div class="mt-3 d-flex justify-content-between">
    <div>
        <button class="btn btn-outline-primary" @onclick="ToggleSelectAll">
            @(addSelectedIds.Count < (filteredSessions?.Count ?? 0) ? "Select All" : "Deselect All")
        </button>
    </div>
    <div>
        <button class="btn btn-primary me-2" @onclick="() => showCreateDatasetModal = true">Create Dataset</button>
        <button class="btn btn-outline-danger" @onclick="ClearSelectedSessionsAsync">Clear</button>
    </div>
</div>

@if (showFilterModal)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Filter Options</h5>
                    <button type="button" class="btn-close" @onclick="() => showFilterModal = false"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <select class="form-select" @bind="filterDescription">
                            <option>All</option>
                            <option>Walk</option>
                            <option>Run</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Age Range</label>
                        <div class="d-flex gap-2">
                            <input type="number" class="form-control" placeholder="Min" @bind="filterAgeMin" min="0" />
                            <input type="number" class="form-control" placeholder="Max" @bind="filterAgeMax" min="0" />
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Min Point Frequency</label>
                        <input type="number" class="form-control" @bind="filterMinPointFreq" min="0" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => showFilterModal = false">Cancel</button>
                    <button class="btn btn-primary" @onclick="FiltherModalClose">Ok</button>
                </div>
            </div>
        </div>
    </div>
}

@if (showCreateDatasetModal)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create Dataset</h5>
                    <button type="button" class="btn-close" @onclick="() => showCreateDatasetModal = false"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Dataset Name</label>
                        <input type="text" class="form-control" @bind="datasetName" placeholder="Enter dataset name" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => showCreateDatasetModal = false">Cancel</button>
                    <button class="btn btn-primary"
                            disabled="@string.IsNullOrWhiteSpace(datasetName)"
                            @onclick="SaveDatasetAsync">
                        Save
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<QueryGaitSessionDTO> allSessions;
    private List<QueryGaitSessionDTO> filteredSessions;
    private List<QueryGaitSessionDTO> selectedSessions = new();
    private HashSet<Guid> addSelectedIds = new();
    private HashSet<Guid> removeSelectedIds = new();
    private int foundSubjectsCount => filteredSessions?.Count ?? 0;
    private int selectedSubjectsCount => selectedSessions?.Count ?? 0;
    private bool showFilterModal = false;
    private string filterDescription = "All";
    private int filterAgeMin = 0;
    private int filterAgeMax = 100;
    private int filterMinPointFreq = 0;
    private bool showCreateDatasetModal = false;
    private string datasetName = string.Empty;
    private string successMessage = string.Empty;

    private async Task LoadSessions()
    {
        allSessions = await GaitSessionService.GetAllGaitSessionsAsync();

        ApplyFilter();
    }

    private void ApplyFilter()
    {
        if (allSessions == null)
        {
            filteredSessions = new List<QueryGaitSessionDTO>();
            return;
        }

        filteredSessions = allSessions
            .Where(session =>
            // Description: match contains (case-insensitive) unless "All"
            (filterDescription == "All" ||
             session.Description?.ToLowerInvariant().Contains(filterDescription.ToLowerInvariant()) == true) &&

                // Age between min and max
                session.Age >= filterAgeMin &&
                session.Age <= filterAgeMax &&

                // PointFreq above minimum
                session.PointFreq >= filterMinPointFreq
            )
            .ToList();
    }

    private void FiltherModalClose()
    {
        showFilterModal = false;
    }

    private void ToggleSelectAll()
    {
        if (filteredSessions == null)
            return;

        if (addSelectedIds.Count < filteredSessions.Count)
        {
            // Markér alle
            foreach (var session in filteredSessions)
                addSelectedIds.Add(session.Id);
        }
        else
        {
            // Fjern alle markeringer
            addSelectedIds.Clear();
        }
    }

    private void ToggleSelectionAdd(Guid sessionId)
    {
        if (!addSelectedIds.Add(sessionId))
            addSelectedIds.Remove(sessionId); // fjern hvis allerede markeret
    }

    private void ToggleSelectedRemove(Guid sessionId)
    {
        if (!removeSelectedIds.Add(sessionId))
            removeSelectedIds.Remove(sessionId);
    }

    private void AddSelectedSessions()
    {
        if (filteredSessions is null || addSelectedIds.Count == 0)
            return;

        // Find de markerede sessions
        var selected = filteredSessions
            .Where(s => addSelectedIds.Contains(s.Id))
            .ToList();

        // Tilføj dem til selectedSessions hvis de ikke allerede findes
        foreach (var session in selected)
        {
            if (!selectedSessions.Any(s => s.Id == session.Id))
                selectedSessions.Add(session);
        }

        // Ryd valget efter flytning
        addSelectedIds.Clear();
    }

    private void RemoveSelectedSessions()
    {
        if (selectedSessions is null || removeSelectedIds.Count == 0)
            return;

        selectedSessions.RemoveAll(s => removeSelectedIds.Contains(s.Id));

        // Ryd valget efter fjernelse
        removeSelectedIds.Clear();
    }

    private async Task ClearSelectedSessionsAsync()
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to clear all selected gait sessions?");

        if (confirmed)
        {
            selectedSessions.Clear();
            removeSelectedIds.Clear();   // ryd også evt. markeringer i højre tabel
        }
    }

    private async Task SaveDatasetAsync()
    {
        if (string.IsNullOrWhiteSpace(datasetName) || selectedSessions.Count == 0)
            return;

        var request = new CreateDatasetRequest
        {
            Name = datasetName,
            PointDataIds = selectedSessions.Select(s => s.PointDataId).ToList()
        };

        await DatasetService.SaveDatasetAsync(request);

        // Reset + luk modal
        datasetName = string.Empty;
        showCreateDatasetModal = false;

        // Ryd valgte sessions (valgfrit)
        selectedSessions.Clear();
        removeSelectedIds.Clear();

        // Vis succes besked
        successMessage = "Dataset was successfully saved!";
    }
}
